
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Hunia
 */
public class ElectionCreateEdit4_1 extends javax.swing.JFrame {
    private String categoryType;
    private String uid;
    private static ArrayList<ArrayList<String>> data;
    private static ArrayList<String> applicantIDs = new ArrayList<>();
    
    /**
     * Creates new form ElectionCreateEdit4_1
     */
    public ElectionCreateEdit4_1(String categoryType, String uid, ArrayList<ArrayList<String>> data) {
        this.categoryType = categoryType;
        this.uid = uid;
        this.data = data;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        logoLb = new javax.swing.JLabel();
        HomeLb = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        AboutusLb = new javax.swing.JLabel();
        FeedbackLb = new javax.swing.JLabel();
        ProfileLb = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        doneBtn = new javax.swing.JButton();
        headerLb = new javax.swing.JLabel();
        clearBtn = new javax.swing.JButton();
        infoPanel1 = new javax.swing.JPanel();
        fnameLb = new javax.swing.JLabel();
        fnameField = new javax.swing.JTextField();
        lnameLb = new javax.swing.JLabel();
        lnameField = new javax.swing.JTextField();
        ageLb = new javax.swing.JLabel();
        cnicLb = new javax.swing.JLabel();
        phoneLb = new javax.swing.JLabel();
        emailLb = new javax.swing.JLabel();
        cnicField = new javax.swing.JFormattedTextField();
        ageField = new javax.swing.JTextField();
        genderLb = new javax.swing.JLabel();
        femaleBtn = new javax.swing.JRadioButton();
        maleBtn = new javax.swing.JRadioButton();
        neutralBtn = new javax.swing.JRadioButton();
        phoneField = new javax.swing.JTextField();
        uIDLb = new javax.swing.JLabel();
        uIDField = new javax.swing.JFormattedTextField();
        emailField = new javax.swing.JTextField();
        rankLb = new javax.swing.JLabel();
        rankField = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        addApplicantBtn = new javax.swing.JButton();
        footerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setBackground(new java.awt.Color(231, 231, 231));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headerPanel.setBackground(new java.awt.Color(0, 0, 0));
        headerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoLb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo_full_w.png"))); // NOI18N
        headerPanel.add(logoLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 10, 130, 80));

        HomeLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        HomeLb.setForeground(new java.awt.Color(255, 255, 255));
        HomeLb.setText("Home");
        HomeLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        HomeLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        HomeLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HomeLbMouseClicked(evt);
            }
        });
        headerPanel.add(HomeLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 60, -1));

        logoutBtn.setBackground(new java.awt.Color(244, 189, 108));
        logoutBtn.setText("Log out");
        logoutBtn.setBorder(null);
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        headerPanel.add(logoutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 30, 80, 30));

        AboutusLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AboutusLb.setForeground(new java.awt.Color(255, 255, 255));
        AboutusLb.setText("About us");
        AboutusLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AboutusLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AboutusLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AboutusLbMouseClicked(evt);
            }
        });
        headerPanel.add(AboutusLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 60, -1));

        FeedbackLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FeedbackLb.setForeground(new java.awt.Color(255, 255, 255));
        FeedbackLb.setText("Feedback");
        FeedbackLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FeedbackLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FeedbackLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FeedbackLbMouseClicked(evt);
            }
        });
        headerPanel.add(FeedbackLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 40, 60, -1));

        ProfileLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ProfileLb.setForeground(new java.awt.Color(255, 255, 255));
        ProfileLb.setText("Profile");
        ProfileLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ProfileLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ProfileLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProfileLbMouseClicked(evt);
            }
        });
        headerPanel.add(ProfileLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, 60, -1));

        mainPanel.add(headerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 90));

        backBtn.setBackground(new java.awt.Color(0, 0, 0));
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Go Back");
        backBtn.setBorder(null);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        mainPanel.add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 70, 30));

        doneBtn.setBackground(new java.awt.Color(0, 0, 0));
        doneBtn.setForeground(new java.awt.Color(255, 255, 255));
        doneBtn.setText("Done");
        doneBtn.setBorder(null);
        doneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneBtnActionPerformed(evt);
            }
        });
        mainPanel.add(doneBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 480, 70, 30));

        headerLb.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        headerLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLb.setText("Election Applicants - Candidates");
        mainPanel.add(headerLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 660, 50));

        clearBtn.setBackground(new java.awt.Color(0, 0, 0));
        clearBtn.setForeground(new java.awt.Color(255, 255, 255));
        clearBtn.setText("Clear");
        clearBtn.setBorder(null);
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        mainPanel.add(clearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 130, 50, 30));

        infoPanel1.setBackground(new java.awt.Color(244, 189, 108));
        infoPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray));
        infoPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fnameLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        fnameLb.setText("First Name");
        infoPanel1.add(fnameLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 90, 30));

        fnameField.setEditable(false);
        fnameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameFieldActionPerformed(evt);
            }
        });
        infoPanel1.add(fnameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 180, 30));

        lnameLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lnameLb.setText("Last Name");
        infoPanel1.add(lnameLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 90, 30));

        lnameField.setEditable(false);
        lnameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnameFieldActionPerformed(evt);
            }
        });
        infoPanel1.add(lnameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 180, 30));

        ageLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        ageLb.setText("Age");
        infoPanel1.add(ageLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, 90, 30));

        cnicLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        cnicLb.setText("CNIC");
        infoPanel1.add(cnicLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 90, 30));

        phoneLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        phoneLb.setText("Phone No.");
        infoPanel1.add(phoneLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 230, 90, 30));

        emailLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        emailLb.setText("Email");
        infoPanel1.add(emailLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 90, 30));

        cnicField.setText("xxxxx-xxxxxxx-x");
        cnicField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnicFieldActionPerformed(evt);
            }
        });
        infoPanel1.add(cnicField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 180, 30));

        ageField.setEditable(false);
        ageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageFieldActionPerformed(evt);
            }
        });
        infoPanel1.add(ageField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 180, 180, 30));

        genderLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        genderLb.setText("Gender");
        infoPanel1.add(genderLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 90, 30));

        genderGroup.add(femaleBtn);
        femaleBtn.setText("Female");
        infoPanel1.add(femaleBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, -1, 30));

        genderGroup.add(maleBtn);
        maleBtn.setText("Male");
        infoPanel1.add(maleBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, -1, 30));

        genderGroup.add(neutralBtn);
        neutralBtn.setText("Neutral");
        infoPanel1.add(neutralBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, -1, 30));

        phoneField.setEditable(false);
        infoPanel1.add(phoneField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 230, 180, 30));

        uIDLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        uIDLb.setText("User ID");
        infoPanel1.add(uIDLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 90, 30));

        uIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uIDFieldActionPerformed(evt);
            }
        });
        infoPanel1.add(uIDField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 180, 30));

        emailField.setEditable(false);
        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });
        infoPanel1.add(emailField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 180, 30));

        rankLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        rankLb.setText("Rank");
        infoPanel1.add(rankLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, 90, 30));

        rankField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "President", "Vice President", "Prime Minister", "Chairperson", "Vice Chairperson", "Secretary General", "Treasurer", "Mentor", "Spokesperson", "Mayor", "Youth Wing Incharge", "Other" }));
        rankField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankFieldActionPerformed(evt);
            }
        });
        infoPanel1.add(rankField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 60, 180, 30));

        mainPanel.add(infoPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 660, 280));

        searchBtn.setBackground(new java.awt.Color(0, 0, 0));
        searchBtn.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn.setText("Search");
        searchBtn.setBorder(null);
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        mainPanel.add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 440, 100, 30));

        addApplicantBtn.setBackground(new java.awt.Color(0, 0, 0));
        addApplicantBtn.setForeground(new java.awt.Color(255, 255, 255));
        addApplicantBtn.setText("Add Applicant");
        addApplicantBtn.setBorder(null);
        addApplicantBtn.setEnabled(false);
        addApplicantBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addApplicantBtnActionPerformed(evt);
            }
        });
        mainPanel.add(addApplicantBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 440, 100, 30));

        footerPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout footerPanelLayout = new javax.swing.GroupLayout(footerPanel);
        footerPanel.setLayout(footerPanelLayout);
        footerPanelLayout.setHorizontalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        footerPanelLayout.setVerticalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        mainPanel.add(footerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, -1, -1));

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        dispose();
        ElectionCreateEdit4 electionCreate = new ElectionCreateEdit4(categoryType, uid, data);
        electionCreate.setVisible(true);                //frame will only be visible with set "true"
        electionCreate.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_backBtnActionPerformed

    private void doneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneBtnActionPerformed
        try {
            Checker check = new Checker();
            Statement stmt = check.connectSQL();
            IDGenerator gen = new IDGenerator();
            String queryInsert, querySearch, queryUpdate;
            //String query = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID) VALUES ('"+idgen.generateUID()+"', '"+cnic+"', "+age+",'"+fname+"','"+lname+"','"+phone+"','"+email+"','"+pwd+"','User','ut')";

            //[[election, 11/11/1111, 11/11/1111, 11/11/1111, etest, ctest, Afghanistan, Private, hahaha	], [voter, u-123, voter-1], [voter, u-4, voter-2], [custom], [candidate, u-3, cand-2, President]]
            
            
            //1) Person Table
            //2) Moderator
            String utID = gen.generateUTypeID();
            querySearch = "Select * from Person where user_id='"+uid+"' and utype_id='ut'";
            ResultSet result = stmt.executeQuery(querySearch);
            
            //if User type exists
            if(result.next()){
                queryUpdate = "Update Person set user_type='Moderator', utype_id='"+utID+"' where user_ID ='"+uid+"'";
                stmt.executeUpdate(queryUpdate);  
             
                queryInsert = "INSERT INTO Moderator (USER_ID, UTYPE_ID) VALUES ('"+uid+"', '"+utID+"')";
                stmt.executeUpdate(queryInsert);
            }
            else{
                querySearch = "Select * from Person where user_id='"+uid+"' and user_type='Moderator'";
                result = stmt.executeQuery(querySearch);
                //if Moderator role does not exist
                if(!result.next()){
                    System.out.println("test1");
                    querySearch = "Select * from Person where user_id='"+uid+"'";
                    result = stmt.executeQuery(querySearch);
                    result.next();
                    queryInsert = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID, GENDER) VALUES ('"+result.getString("user_id")+"', '"+result.getString("cnic")+"', "+result.getString("age")+",'"+result.getString("first_name")+"','"+result.getString("last_name")+"','"+result.getString("phone_number")+"','"+result.getString("email")+"','"+result.getString("password")+"', 'Moderator', '"+utID+"', '"+result.getString("gender")+"')";
                    stmt.executeUpdate(queryInsert);
                  
                    queryInsert = "INSERT INTO Moderator (USER_ID, UTYPE_ID) VALUES ('"+uid+"', '"+utID+"')";
                    stmt.executeUpdate(queryInsert);
                }
                //if Moderator exists
                else{
                    System.out.println("test2");
                    querySearch = "Select utype_id from Person where user_id='"+uid+"'";
                    result = stmt.executeQuery(querySearch);
                    result.next();
                    utID=result.getString(1);
                }
            }
            
            //3) E-Category
            //4) Custom, Referendum, Organizations, Government
            String catString, specificCatID;
            String eCatID = gen.generateCatID();
            
            for(int i=0; i<data.size(); i++){
                if(data.get(i).contains("custom")){
                    catString="Custom";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateCustID();
                    queryInsert = "INSERT INTO custom (ELECTION_CID, CUSTOM_ID) VALUES ('"+eCatID+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                    
                }
                else if(data.get(i).contains("referendum")){
                    catString="Referendum";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateRefID();
                    queryInsert = "INSERT INTO referendum (ELECTION_CID, STATEMENT, REFERENDUM_ID) VALUES ('"+eCatID+"', '"+data.get(i).get(1)+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                }
                else if(data.get(i).contains("organization")){
                    catString="Organization";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateOrgID();
                    queryInsert = "INSERT INTO organizations (ELECTION_CID, ORGANIZATION_NAME, ORGANIZATION_TYPE, ORGANIZATION_ID) VALUES ('"+eCatID+"', '"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                }
                else if(data.get(i).contains("government")){
                    catString="Government";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateGovernID();
                    queryInsert = "INSERT INTO government (ELECTION_CID, PARTY_NAME, PARTY_STATUS, PARTY_ID) VALUES ('"+eCatID+"', '"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                }
            }
            
            //5) Election
            String electionID = gen.generateElectionID();
            queryInsert = "INSERT INTO election (ELECTION_CID, ELECTION_ID, ELECTION_NAME, ELECTION_DESCRIPTION, STARTDATE, ENDDATE, PRIVACY, CITY, COUNTRY, MODERATOR_UID, RESULTDATE) VALUES ('"+eCatID+"', '"+electionID+"', '"+data.get(0).get(4)+"', '"+data.get(0).get(8)+"', '"+data.get(0).get(1)+"', '"+data.get(0).get(2)+"', '"+data.get(0).get(7)+"', '"+data.get(0).get(5)+"', '"+data.get(0).get(6)+"', '"+uid+"', '"+data.get(0).get(3)+"')";
            stmt.executeUpdate(queryInsert);
            
            //6) Person
            //7) Voters
            //8) Registrations
            for(int i=0; i<data.size(); i++){
                if(data.get(i).get(0).equalsIgnoreCase("voter")){
                    utID = gen.generateUTypeID();
                    querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and utype_id='ut'";
                    result = stmt.executeQuery(querySearch);

                    //if User type exists
                    if(result.next()){
                        queryUpdate = "Update Person set user_type='Voter', utype_id='"+utID+"' where user_ID ='"+data.get(i).get(1)+"'";
                        stmt.executeUpdate(queryUpdate);  

                        queryInsert = "INSERT INTO Voter (USER_ID, VOTER_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+utID+"')";
                        stmt.executeUpdate(queryInsert);

                        queryInsert = "INSERT INTO Registrations (VOTER_UID, ELECTION_ID, ELECTION_CID, VOTER_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                        stmt.executeUpdate(queryInsert);
                    }
                    else{
                        querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and user_type='Voter'";
                        result = stmt.executeQuery(querySearch);
                        //if Voter role does not exist
                        if(!result.next()){
                            System.out.println("vtest3");
                            querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            queryInsert = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID, GENDER) VALUES ('"+result.getString("user_id")+"', '"+result.getString("cnic")+"', "+result.getString("age")+",'"+result.getString("first_name")+"','"+result.getString("last_name")+"','"+result.getString("phone_number")+"','"+result.getString("email")+"','"+result.getString("password")+"', 'Voter', '"+utID+"', '"+result.getString("gender")+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Voter (USER_ID, VOTER_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Registrations (VOTER_UID, ELECTION_ID, ELECTION_CID, VOTER_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);
                        }
                        //if Voter exists
                        else{
                            querySearch = "Select utype_id from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            utID=result.getString(1);

                            queryInsert = "INSERT INTO Voter (USER_ID, VOTER_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Registrations (VOTER_UID, ELECTION_ID, ELECTION_CID, VOTER_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);
                        }
                    }
                
                }
            }
            
            //9)  Person 
            //10) Candidates
            //11) CandidateApplicants
            //12) AddedCandidateRecord
            for(int i=0; i<data.size(); i++){
                if(data.get(i).get(0).equalsIgnoreCase("candidate")){
                    utID = gen.generateUTypeID();
                    querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and utype_id='ut'";
                    result = stmt.executeQuery(querySearch);

                    //if User type exists
                    if(result.next()){
                        queryUpdate = "Update Person set user_type='Candidate', utype_id='"+utID+"' where user_ID ='"+data.get(i).get(1)+"'";
                        stmt.executeUpdate(queryUpdate);  

                        queryInsert = "INSERT INTO Candidate (USER_ID, CANDIDATE_ID, POSITION, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+data.get(i).get(3)+"', '"+utID+"')";
                        stmt.executeUpdate(queryInsert);

                        queryInsert = "INSERT INTO CandidateApplicants (CANDIDATE_UID, ELECTION_ID, ELECTION_CID, CANDIDATE_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                        stmt.executeUpdate(queryInsert);

                        if(!check.candidateRecordRepeats(uid, data.get(i).get(1))){
                            queryInsert = "INSERT INTO AddedCandidateRecord (MODERATOR_UID, CANDIDATE_UID, CANDIDATE_ID) VALUES ('"+uid+"', '"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);
                        }
                        
                    }
                    else{
                        querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and user_type='Candidate'";
                        result = stmt.executeQuery(querySearch);
                        //if Candidate role does not exist
                        if(!result.next()){                    
                            querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            queryInsert = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID, GENDER) VALUES ('"+result.getString("user_id")+"', '"+result.getString("cnic")+"', "+result.getString("age")+",'"+result.getString("first_name")+"','"+result.getString("last_name")+"','"+result.getString("phone_number")+"','"+result.getString("email")+"','"+result.getString("password")+"', 'Candidate', '"+utID+"', '"+result.getString("gender")+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Candidate (USER_ID, CANDIDATE_ID, POSITION, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+data.get(i).get(3)+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO CandidateApplicants (CANDIDATE_UID, ELECTION_ID, ELECTION_CID, CANDIDATE_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);

                            if(!check.candidateRecordRepeats(uid, data.get(i).get(1))){
                                queryInsert = "INSERT INTO AddedCandidateRecord (MODERATOR_UID, CANDIDATE_UID, CANDIDATE_ID) VALUES ('"+uid+"', '"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"')";
                                stmt.executeUpdate(queryInsert);
                            }
                        }
                        //if Candidate exists
                        else{
                            querySearch = "Select utype_id from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            utID=result.getString(1);

                            queryInsert = "INSERT INTO Candidate (USER_ID, CANDIDATE_ID, POSITION, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+data.get(i).get(3)+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO CandidateApplicants (CANDIDATE_UID, ELECTION_ID, ELECTION_CID, CANDIDATE_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);

                            if(!check.candidateRecordRepeats(uid, data.get(i).get(1))){
                                queryInsert = "INSERT INTO AddedCandidateRecord (MODERATOR_UID, CANDIDATE_UID, CANDIDATE_ID) VALUES ('"+uid+"', '"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"')";
                                stmt.executeUpdate(queryInsert);
                            }
                        }
                    }
                
                }
            } 
        } 
        catch (Exception ex) {
            System.out.println(ex.toString());
            ex.printStackTrace();
        }
        
        JOptionPane.showMessageDialog(null, "Election Created Successfully!");
        dispose();
        ElectionMainScreen election = new ElectionMainScreen(uid);
        election.setVisible(true);                //frame will only be visible with set "true"
        election.setLocationRelativeTo(null);     //for opening in center
        
    }//GEN-LAST:event_doneBtnActionPerformed

    private void addApplicantBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addApplicantBtnActionPerformed
        try{
            int result = JOptionPane.showConfirmDialog(null,"Are you sure you want to add the candidate?", "Candidate Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(result == JOptionPane.YES_OPTION){
                //applicant id generated
                IDGenerator idgen = new IDGenerator();
                String apID = idgen.generateCandidateID(applicantIDs);
                
                //applicant data added
                ArrayList<String> applicantData = new ArrayList<>();
                applicantData.add("candidate");
                applicantData.add(uIDField.getText());
                applicantData.add(apID);
                applicantData.add(rankField.getSelectedItem().toString());
                
                //checks if applicant details already added to data arrayList or not
                boolean repeats = false;
                int i;
                for(i=0; i<data.size() && data.get(i).get(0).equalsIgnoreCase("candidate"); i++){
                    if(data.get(i).get(1).equalsIgnoreCase(uIDField.getText()) && data.get(i).get(3).equalsIgnoreCase(rankField.getSelectedItem().toString())){
                        repeats = true;
                        break;
                    }
                }
                
                if(!repeats){
                   applicantIDs.add(apID);
                   this.data.add(applicantData);
                }
                else if(data.get(i).get(3).equalsIgnoreCase(rankField.getSelectedItem().toString())){
                    JOptionPane.showMessageDialog((Component)null, "Rank already added!");
                }
                else{
                    JOptionPane.showMessageDialog((Component)null, "Candidate already added!");
                }
                
                System.out.println(data);
                uIDField.setText("");
                cnicField.setText("xxxxx-xxxxxxx-x");
                fnameField.setText("");
                lnameField.setText("");
                emailField.setText("");
                ageField.setText("");
                phoneField.setText("");
                genderGroup.clearSelection();
                rankField.setSelectedItem("President");
                addApplicantBtn.setEnabled(false);
            } 
        }catch(Exception ex){
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_addApplicantBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        int result = JOptionPane.showConfirmDialog(null,"Are you sure you want to log out?", "Logout Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            dispose();
            Homepage home = new Homepage();
            home.setVisible(true);                //frame will only be visible with set "true"
            home.setLocationRelativeTo(null);     //for opening in center
        } 
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void HomeLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeLbMouseClicked
        dispose();
        MainScreen main = new MainScreen(uid);
        main.setVisible(true);                //frame will only be visible with set "true"
        main.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_HomeLbMouseClicked

    private void AboutusLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AboutusLbMouseClicked
        dispose();
        AboutUs about= new AboutUs();
        about.setVisible(true);
        about.setLocationRelativeTo (null);        
    }//GEN-LAST:event_AboutusLbMouseClicked

    private void FeedbackLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FeedbackLbMouseClicked
        // TODO add your handling code here:
        
        Feedback feed = new Feedback(uid);
        feed.setVisible(true);                //frame will only be visible with set "true"
        feed.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_FeedbackLbMouseClicked

    private void lnameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lnameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lnameFieldActionPerformed

    private void cnicFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnicFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cnicFieldActionPerformed

    private void ageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageFieldActionPerformed

    private void fnameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnameFieldActionPerformed

    private void uIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uIDFieldActionPerformed

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailFieldActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        try{
            boolean userFound = false;
            Checker check = new Checker();
            Statement stmt = check.connectSQL();
            ResultSet result = null;
            if(uIDField.getText() != null && (cnicField.getText() != null && !cnicField.getText().equalsIgnoreCase("xxxxx-xxxxxxx-x"))){
                result = stmt.executeQuery("Select * from Person where user_id='"+uIDField.getText().toLowerCase()+"' and cnic='"+cnicField.getText()+"'");
                if(result.next()){
                    userFound = true;
                }
                else{
                    JOptionPane.showMessageDialog((Component)null, "User not found!");
                }
            }
            else if(uIDField.getText() != null){
                result = stmt.executeQuery("Select * from Person where user_id='"+uIDField.getText().toLowerCase()+"'");
                if(result.next()){
                    userFound = true;
                }
                else{
                    JOptionPane.showMessageDialog((Component)null, "User not found!");
                }
            }
            else if(cnicField.getText() != null && !cnicField.getText().equalsIgnoreCase("xxxxx-xxxxxxx-x")){
                result = stmt.executeQuery("Select * from Person where cnic='"+cnicField.getText()+"'");
                if(result.next()){
                    userFound = true;
                }
                else{
                    JOptionPane.showMessageDialog((Component)null, "User not found!");
                }
            }
            else{
                JOptionPane.showMessageDialog((Component)null, "Please enter CNIC or User ID!");
            }

            if(userFound){
                uIDField.setText(result.getString("user_id"));
                cnicField.setText(result.getString("cnic"));

                fnameField.setText(result.getString("first_name"));
                lnameField.setText(result.getString("last_name"));
                emailField.setText(result.getString("email"));
                ageField.setText(result.getString("age"));
                phoneField.setText(result.getString("phone_number"));

                String gender = result.getString("gender");
                if(gender.equalsIgnoreCase("female")){
                    femaleBtn.setSelected(true);
                }
                else if(gender.equalsIgnoreCase("male")){
                    maleBtn.setSelected(true);
                }
                else{
                    neutralBtn.setSelected(true);
                }

                addApplicantBtn.setEnabled(true);
            }

        }
        catch(Exception ex){
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void rankFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rankFieldActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        uIDField.setText("");
        cnicField.setText("xxxxx-xxxxxxx-x");
        fnameField.setText("");
        lnameField.setText("");
        emailField.setText("");
        ageField.setText("");
        phoneField.setText("");
        genderGroup.clearSelection();
        rankField.setSelectedItem("President");
        addApplicantBtn.setEnabled(false);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void ProfileLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProfileLbMouseClicked
        Profile1 profile = new Profile1(uid);
        profile.setVisible(true);                //frame will only be visible with set "true"
        profile.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_ProfileLbMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ElectionCreateEdit4_1("", null, new ArrayList<>()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AboutusLb;
    private javax.swing.JLabel FeedbackLb;
    private javax.swing.JLabel HomeLb;
    private javax.swing.JLabel ProfileLb;
    private javax.swing.JButton addApplicantBtn;
    private javax.swing.JTextField ageField;
    private javax.swing.JLabel ageLb;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JFormattedTextField cnicField;
    private javax.swing.JLabel cnicLb;
    private javax.swing.JButton doneBtn;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLb;
    private javax.swing.JRadioButton femaleBtn;
    private javax.swing.JTextField fnameField;
    private javax.swing.JLabel fnameLb;
    private javax.swing.JPanel footerPanel;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JLabel genderLb;
    private javax.swing.JLabel headerLb;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel infoPanel1;
    private javax.swing.JTextField lnameField;
    private javax.swing.JLabel lnameLb;
    private javax.swing.JLabel logoLb;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton maleBtn;
    private javax.swing.JRadioButton neutralBtn;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLb;
    private javax.swing.JComboBox<String> rankField;
    private javax.swing.JLabel rankLb;
    private javax.swing.JButton searchBtn;
    private javax.swing.JFormattedTextField uIDField;
    private javax.swing.JLabel uIDLb;
    // End of variables declaration//GEN-END:variables
}
