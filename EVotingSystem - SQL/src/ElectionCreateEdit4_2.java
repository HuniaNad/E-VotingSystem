
import java.awt.Component;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Hunia
 */
public class ElectionCreateEdit4_2 extends javax.swing.JFrame {
    private String categoryType;
    private String uid;
    private static ArrayList<ArrayList<String>> data;
    private static ArrayList<String> groupIDs = new ArrayList<>();;
    /**
     * Creates new form ElectionCreateEdit4_2
     */
    public ElectionCreateEdit4_2(String categoryType, String uid, ArrayList<ArrayList<String>> data) {
        this.categoryType = categoryType;
        this.uid = uid;
        this.data = data;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        logoLb = new javax.swing.JLabel();
        HomeLb = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        AboutusLb = new javax.swing.JLabel();
        FeedbackLb = new javax.swing.JLabel();
        ProfileLb = new javax.swing.JLabel();
        footerPanel = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();
        doneBtn = new javax.swing.JButton();
        headerLb = new javax.swing.JLabel();
        clearBtn = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        descLb = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        addGroupBtn = new javax.swing.JButton();
        nameLb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descArea = new javax.swing.JTextArea();
        uidLb = new javax.swing.JLabel();
        uidField = new javax.swing.JTextField();
        cnicLb = new javax.swing.JLabel();
        cnicField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(231, 231, 231));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headerPanel.setBackground(new java.awt.Color(0, 0, 0));
        headerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoLb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo_full_w.png"))); // NOI18N
        headerPanel.add(logoLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 10, 130, 80));

        HomeLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        HomeLb.setForeground(new java.awt.Color(255, 255, 255));
        HomeLb.setText("Home");
        HomeLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        HomeLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        HomeLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HomeLbMouseClicked(evt);
            }
        });
        headerPanel.add(HomeLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 60, -1));

        logoutBtn.setBackground(new java.awt.Color(244, 189, 108));
        logoutBtn.setText("Log out");
        logoutBtn.setBorder(null);
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        headerPanel.add(logoutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 30, 80, 30));

        AboutusLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AboutusLb.setForeground(new java.awt.Color(255, 255, 255));
        AboutusLb.setText("About us");
        AboutusLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AboutusLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AboutusLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AboutusLbMouseClicked(evt);
            }
        });
        headerPanel.add(AboutusLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 60, -1));

        FeedbackLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FeedbackLb.setForeground(new java.awt.Color(255, 255, 255));
        FeedbackLb.setText("Feedback");
        FeedbackLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FeedbackLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FeedbackLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FeedbackLbMouseClicked(evt);
            }
        });
        headerPanel.add(FeedbackLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 40, 60, -1));

        ProfileLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ProfileLb.setForeground(new java.awt.Color(255, 255, 255));
        ProfileLb.setText("Profile");
        ProfileLb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ProfileLb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ProfileLb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProfileLbMouseClicked(evt);
            }
        });
        headerPanel.add(ProfileLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, 60, -1));

        mainPanel.add(headerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 90));

        footerPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout footerPanelLayout = new javax.swing.GroupLayout(footerPanel);
        footerPanel.setLayout(footerPanelLayout);
        footerPanelLayout.setHorizontalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        footerPanelLayout.setVerticalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        mainPanel.add(footerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, -1, 10));

        backBtn.setBackground(new java.awt.Color(0, 0, 0));
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Go Back");
        backBtn.setBorder(null);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        mainPanel.add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 70, 30));

        doneBtn.setBackground(new java.awt.Color(0, 0, 0));
        doneBtn.setForeground(new java.awt.Color(255, 255, 255));
        doneBtn.setText("Done");
        doneBtn.setBorder(null);
        doneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneBtnActionPerformed(evt);
            }
        });
        mainPanel.add(doneBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 450, 70, 30));

        headerLb.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        headerLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLb.setText("Election Applicant - Groups");
        mainPanel.add(headerLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 560, 50));

        clearBtn.setBackground(new java.awt.Color(0, 0, 0));
        clearBtn.setForeground(new java.awt.Color(255, 255, 255));
        clearBtn.setText("Clear");
        clearBtn.setBorder(null);
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        mainPanel.add(clearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 130, 50, 30));

        infoPanel.setBackground(new java.awt.Color(244, 189, 108));
        infoPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray));
        infoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        descLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        descLb.setText("Description");
        infoPanel.add(descLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 130, 30));

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });
        infoPanel.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 280, 30));

        addGroupBtn.setBackground(new java.awt.Color(0, 0, 0));
        addGroupBtn.setForeground(new java.awt.Color(255, 255, 255));
        addGroupBtn.setText("Add Group");
        addGroupBtn.setBorder(null);
        addGroupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupBtnActionPerformed(evt);
            }
        });
        infoPanel.add(addGroupBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 250, 100, 30));

        nameLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        nameLb.setText("Name");
        infoPanel.add(nameLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 130, 30));

        descArea.setColumns(20);
        descArea.setRows(5);
        jScrollPane1.setViewportView(descArea);

        infoPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 280, -1));

        uidLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        uidLb.setText("User ID of Admin ");
        infoPanel.add(uidLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 150, 30));

        uidField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uidFieldActionPerformed(evt);
            }
        });
        infoPanel.add(uidField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 110, 30));

        cnicLb.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        cnicLb.setText("CNIC of Admin ");
        infoPanel.add(cnicLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 150, 30));

        cnicField.setText("xxxxx-xxxxxxx-x");
        cnicField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnicFieldActionPerformed(evt);
            }
        });
        infoPanel.add(cnicField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 170, 30));

        mainPanel.add(infoPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 620, 290));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        dispose();
        ElectionCreateEdit4 electionCreate = new ElectionCreateEdit4(categoryType, uid, data);
        electionCreate.setVisible(true);                //frame will only be visible with set "true"
        electionCreate.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_backBtnActionPerformed

    private void doneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneBtnActionPerformed
        try {
            Checker check = new Checker();
            Statement stmt = check.connectSQL();
            IDGenerator gen = new IDGenerator();
            String queryInsert, querySearch, queryUpdate;
            //String query = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID) VALUES ('"+idgen.generateUID()+"', '"+cnic+"', "+age+",'"+fname+"','"+lname+"','"+phone+"','"+email+"','"+pwd+"','User','ut')";

            //[[election, 11/11/1111, 11/11/1111, 11/11/1111, etest, ctest, Afghanistan, Private, hahaha	], [voter, u-123, voter-1], [voter, u-4, voter-2], [custom], [candidate, u-3, cand-2, President]]
            
            
            //1) Person Table
            //2) Moderator
            String utID = gen.generateUTypeID();
            querySearch = "Select * from Person where user_id='"+uid+"' and utype_id='ut'";
            ResultSet result = stmt.executeQuery(querySearch);
            
            //if User type exists
            if(result.next()){
                queryUpdate = "Update Person set user_type='Moderator', utype_id='"+utID+"' where user_ID ='"+uid+"'";
                stmt.executeUpdate(queryUpdate);  
             
                queryInsert = "INSERT INTO Moderator (USER_ID, UTYPE_ID) VALUES ('"+uid+"', '"+utID+"')";
                stmt.executeUpdate(queryInsert);
            }
            else{
                querySearch = "Select * from Person where user_id='"+uid+"' and user_type='Moderator'";
                result = stmt.executeQuery(querySearch);
                //if Moderator role does not exist
                if(!result.next()){
                    System.out.println("test1");
                    querySearch = "Select * from Person where user_id='"+uid+"'";
                    result = stmt.executeQuery(querySearch);
                    result.next();
                    queryInsert = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID, GENDER) VALUES ('"+result.getString("user_id")+"', '"+result.getString("cnic")+"', "+result.getString("age")+",'"+result.getString("first_name")+"','"+result.getString("last_name")+"','"+result.getString("phone_number")+"','"+result.getString("email")+"','"+result.getString("password")+"', 'Moderator', '"+utID+"', '"+result.getString("gender")+"')";
                    stmt.executeUpdate(queryInsert);
                  
                    queryInsert = "INSERT INTO Moderator (USER_ID, UTYPE_ID) VALUES ('"+uid+"', '"+utID+"')";
                    stmt.executeUpdate(queryInsert);
                }
                //if Moderator exists
                else{
                    System.out.println("test2");
                    querySearch = "Select utype_id from Person where user_id='"+uid+"'";
                    result = stmt.executeQuery(querySearch);
                    result.next();
                    utID=result.getString(1);
                }
            }
            
            //3) E-Category
            //4) Custom, Referendum, Organizations, Government
            String catString, specificCatID;
            String eCatID = gen.generateCatID();
            
            for(int i=0; i<data.size(); i++){
                if(data.get(i).contains("custom")){
                    catString="Custom";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateCustID();
                    queryInsert = "INSERT INTO custom (ELECTION_CID, CUSTOM_ID) VALUES ('"+eCatID+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                    
                }
                else if(data.get(i).contains("referendum")){
                    catString="Referendum";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateRefID();
                    queryInsert = "INSERT INTO referendum (ELECTION_CID, STATEMENT, REFERENDUM_ID) VALUES ('"+eCatID+"', '"+data.get(i).get(1)+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                }
                else if(data.get(i).contains("organization")){
                    catString="Organization";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateOrgID();
                    queryInsert = "INSERT INTO organizations (ELECTION_CID, ORGANIZATION_NAME, ORGANIZATION_TYPE, ORGANIZATION_ID) VALUES ('"+eCatID+"', '"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                }
                else if(data.get(i).contains("government")){
                    catString="Government";
                    queryInsert = "INSERT INTO e_category (CATEGORY_ID, CATEGORY_TYPE) VALUES ('"+eCatID+"', '"+catString+"')";
                    stmt.executeUpdate(queryInsert);
                    
                    specificCatID = gen.generateGovernID();
                    queryInsert = "INSERT INTO government (ELECTION_CID, PARTY_NAME, PARTY_STATUS, PARTY_ID) VALUES ('"+eCatID+"', '"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+specificCatID+"')";
                    stmt.executeUpdate(queryInsert);
                    break;
                }
            }
            
            //5) Election
            String electionID = gen.generateElectionID();
            queryInsert = "INSERT INTO election (ELECTION_CID, ELECTION_ID, ELECTION_NAME, ELECTION_DESCRIPTION, STARTDATE, ENDDATE, PRIVACY, CITY, COUNTRY, MODERATOR_UID, RESULTDATE) VALUES ('"+eCatID+"', '"+electionID+"', '"+data.get(0).get(4)+"', '"+data.get(0).get(8)+"', '"+data.get(0).get(1)+"', '"+data.get(0).get(2)+"', '"+data.get(0).get(7)+"', '"+data.get(0).get(5)+"', '"+data.get(0).get(6)+"', '"+uid+"', '"+data.get(0).get(3)+"')";
            stmt.executeUpdate(queryInsert);
            
            //6) Person
            //7) Voters
            //8) Registrations
            for(int i=0; i<data.size(); i++){
                if(data.get(i).get(0).equalsIgnoreCase("voter")){
                    utID = gen.generateUTypeID();
                    querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and utype_id='ut'";
                    result = stmt.executeQuery(querySearch);

                    //if User type exists
                    if(result.next()){
                        queryUpdate = "Update Person set user_type='Voter', utype_id='"+utID+"' where user_ID ='"+data.get(i).get(1)+"'";
                        stmt.executeUpdate(queryUpdate);  

                        queryInsert = "INSERT INTO Voter (USER_ID, VOTER_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+utID+"')";
                        stmt.executeUpdate(queryInsert);

                        queryInsert = "INSERT INTO Registrations (VOTER_UID, ELECTION_ID, ELECTION_CID, VOTER_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                        stmt.executeUpdate(queryInsert);
                    }
                    else{
                        querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and user_type='Voter'";
                        result = stmt.executeQuery(querySearch);
                        //if Voter role does not exist
                        if(!result.next()){
                            System.out.println("vtest3");
                            querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            queryInsert = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID, GENDER) VALUES ('"+result.getString("user_id")+"', '"+result.getString("cnic")+"', "+result.getString("age")+",'"+result.getString("first_name")+"','"+result.getString("last_name")+"','"+result.getString("phone_number")+"','"+result.getString("email")+"','"+result.getString("password")+"', 'Voter', '"+utID+"', '"+result.getString("gender")+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Voter (USER_ID, VOTER_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Registrations (VOTER_UID, ELECTION_ID, ELECTION_CID, VOTER_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);
                        }
                        //if Voter exists
                        else{
                            querySearch = "Select utype_id from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            utID=result.getString(1);

                            queryInsert = "INSERT INTO Voter (USER_ID, VOTER_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+data.get(i).get(2)+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Registrations (VOTER_UID, ELECTION_ID, ELECTION_CID, VOTER_ID) VALUES ('"+data.get(i).get(1)+"', '"+electionID+"', '"+eCatID+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);
                        }
                    }
                
                }
            }
            
            //9)  Person 
            //10) Group_Admin
            //11) Party/Group
            //12) AddedGroupAdminRecord
            //13) AddedGroupRecord
            //14) groupApplicants 
            String adminID;
            for(int i=0; i<data.size(); i++){
                if(data.get(i).get(0).equalsIgnoreCase("group")){
                    utID = gen.generateUTypeID();
                    adminID = gen.generateAdminID();
                    querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and utype_id='ut'";
                    result = stmt.executeQuery(querySearch);

                    //if User type exists
                    if(result.next()){
                        queryUpdate = "Update Person set user_type='Group_Admin', utype_id='"+utID+"' where user_ID ='"+data.get(i).get(1)+"'";
                        stmt.executeUpdate(queryUpdate);  

                        queryInsert = "INSERT INTO Group_Admin (USER_ID, ADMIN_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+adminID+"', '"+utID+"')";
                        stmt.executeUpdate(queryInsert);
                        
                        queryInsert = "INSERT INTO party_group (GROUP_ID, Group_NAME, GROUP_DESCRIPTION, ADMIN_UID, ADMIN_ID) VALUES ('"+data.get(i).get(2)+"', '"+data.get(i).get(3)+"', '"+data.get(i).get(4)+"', '"+data.get(i).get(1)+"', '"+adminID+"')";
                        stmt.executeUpdate(queryInsert);

                        queryInsert = "INSERT INTO GroupApplicants (GROUP_ID, ELECTION_ID, ELECTION_CID) VALUES ('"+data.get(i).get(2)+"', '"+electionID+"', '"+eCatID+"')";
                        stmt.executeUpdate(queryInsert);
                        
                        queryInsert = "INSERT INTO AddedGroupRecord (MODERATOR_UID, GROUP_ID) VALUES ('"+uid+"', '"+data.get(i).get(2)+"')";
                        stmt.executeUpdate(queryInsert);
                        
                        if(!check.adminRecordRepeats(uid, data.get(i).get(1))){
                                queryInsert = "INSERT INTO AddedGroupAdminRecord (MODERATOR_UID, ADMIN_UID, ADMIN_ID) VALUES ('"+uid+"', '"+data.get(i).get(1)+"', '"+adminID+"')";
                                stmt.executeUpdate(queryInsert);
                        }
                       
                    }
                    else{
                        querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"' and user_type='Group_Admin'";
                        result = stmt.executeQuery(querySearch);
                        //if Group_Admin role does not exist
                        if(!result.next()){                    
                            querySearch = "Select * from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            queryInsert = "INSERT INTO Person (USER_ID, CNIC, AGE, FIRST_NAME, LAST_NAME, PHONE_NUMBER, EMAIL, PASSWORD, USER_TYPE, UTYPE_ID, GENDER) VALUES ('"+result.getString("user_id")+"', '"+result.getString("cnic")+"', "+result.getString("age")+",'"+result.getString("first_name")+"','"+result.getString("last_name")+"','"+result.getString("phone_number")+"','"+result.getString("email")+"','"+result.getString("password")+"', 'Group_Admin', '"+utID+"', '"+result.getString("gender")+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO Group_Admin (USER_ID, ADMIN_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+adminID+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO party_group (GROUP_ID, Group_NAME, GROUP_DESCRIPTION, ADMIN_UID, ADMIN_ID) VALUES ('"+data.get(i).get(2)+"', '"+data.get(i).get(3)+"', '"+data.get(i).get(4)+"', '"+data.get(i).get(1)+"', '"+adminID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO GroupApplicants (GROUP_ID, ELECTION_ID, ELECTION_CID) VALUES ('"+data.get(i).get(2)+"', '"+electionID+"', '"+eCatID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO AddedGroupRecord (MODERATOR_UID, GROUP_ID) VALUES ('"+uid+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);
                            
                            if(!check.adminRecordRepeats(uid, data.get(i).get(1))){
                                queryInsert = "INSERT INTO AddedGroupAdminRecord (MODERATOR_UID, ADMIN_UID, ADMIN_ID) VALUES ('"+uid+"', '"+data.get(i).get(1)+"', '"+adminID+"')";
                                stmt.executeUpdate(queryInsert);
                            }

                        }
                        //if Group_Admin exists
                        else{
                            querySearch = "Select utype_id from Person where user_id='"+data.get(i).get(1)+"'";
                            result = stmt.executeQuery(querySearch);
                            result.next();
                            utID=result.getString(1);

                            queryInsert = "INSERT INTO Group_Admin (USER_ID, ADMIN_ID, UTYPE_ID) VALUES ('"+data.get(i).get(1)+"', '"+adminID+"', '"+utID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO party_group (GROUP_ID, Group_NAME, GROUP_DESCRIPTION, ADMIN_UID, ADMIN_ID) VALUES ('"+data.get(i).get(2)+"', '"+data.get(i).get(3)+"', '"+data.get(i).get(4)+"', '"+data.get(i).get(1)+"', '"+adminID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO GroupApplicants (GROUP_ID, ELECTION_ID, ELECTION_CID) VALUES ('"+data.get(i).get(2)+"', '"+electionID+"', '"+eCatID+"')";
                            stmt.executeUpdate(queryInsert);

                            queryInsert = "INSERT INTO AddedGroupRecord (MODERATOR_UID, GROUP_ID) VALUES ('"+uid+"', '"+data.get(i).get(2)+"')";
                            stmt.executeUpdate(queryInsert);
                            
                            if(!check.adminRecordRepeats(uid, data.get(i).get(1))){
                                queryInsert = "INSERT INTO AddedGroupAdminRecord (MODERATOR_UID, ADMIN_UID, ADMIN_ID) VALUES ('"+uid+"', '"+data.get(i).get(1)+"', '"+adminID+"')";
                                stmt.executeUpdate(queryInsert);
                            }
                            
                            
                        }
                    }
                }
            } 
            
        } 
        catch (Exception ex) {
            System.out.println(ex.toString());
        }
        
        JOptionPane.showMessageDialog(null, "Election Created Successfully!");
        dispose();
        ElectionMainScreen election = new ElectionMainScreen(uid);
        election.setVisible(true);                //frame will only be visible with set "true"
        election.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_doneBtnActionPerformed

    private void addGroupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupBtnActionPerformed
        try{
            Checker check = new Checker();
            String name;
            boolean flag = false, userFound = false;
            Statement stmt = check.connectSQL();
            ResultSet result = null;
            
            if(uidField.getText() != null && (cnicField.getText() != null && !cnicField.getText().equalsIgnoreCase("xxxxx-xxxxxxx-x"))){
                result = stmt.executeQuery("Select * from Person where user_id='"+uidField.getText().toLowerCase()+"' and cnic='"+cnicField.getText()+"'");
                if(result.next()){
                    userFound = true;
                }
                else{
                    JOptionPane.showMessageDialog((Component)null, "User not found!");
                }
            }
            else if(uidField.getText() != null){
                result = stmt.executeQuery("Select * from Person where user_id='"+uidField.getText().toLowerCase()+"'");
                if(result.next()){
                    userFound = true;
                }
                else{
                    JOptionPane.showMessageDialog((Component)null, "User not found!");
                }
            }
            else if(cnicField.getText() != null && !cnicField.getText().equalsIgnoreCase("xxxxx-xxxxxxx-x")){
                result = stmt.executeQuery("Select * from Person where cnic='"+cnicField.getText()+"'");
                if(result.next()){
                    userFound = true;
                }
                else{
                    JOptionPane.showMessageDialog((Component)null, "User not found!");
                }
            }
            else{
                JOptionPane.showMessageDialog((Component)null, "Please enter CNIC or User ID!");
            }
            
            if(userFound){
                if(check.isName(nameField.getText())){
                    name = nameField.getText();
                    nameField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 204, 0)));
                }
                else{
                    nameField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
                    flag = true;
                }
                
                if(flag){
                    JOptionPane.showMessageDialog((Component)null, "Please enter valid group name!");
                }
                else{
                    int rst = JOptionPane.showConfirmDialog(null,"Are you sure you want to add the group?", "Group Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if(rst == JOptionPane.YES_OPTION){
                        ResultSet qResult = stmt.executeQuery("Select * from Person where user_id='"+uidField.getText()+"'");
                        if(qResult.next()){
                            //group id generated
                            IDGenerator idgen = new IDGenerator();
                            String grpID = idgen.generateGroupID(groupIDs);

                            //group data added
                            ArrayList<String> groupData = new ArrayList<>();
                            groupData.add("group");
                            groupData.add(uidField.getText());
                            groupData.add(grpID);
                            groupData.add(nameField.getText());
                            groupData.add(descArea.getText());

                            //checks if group details already added to data arrayList or not
                            boolean repeats = false;
                            for(int i=0; i<data.size() && data.get(i).get(0).equalsIgnoreCase("group"); i++){
                                if(data.get(i).get(3).equalsIgnoreCase(nameField.getText())){
                                    repeats = true;
                                    break;
                                }
                            }

                            if(!repeats){
                               groupIDs.add(grpID);
                               this.data.add(groupData);
                            }
                            else{
                                JOptionPane.showMessageDialog((Component)null, "Group already added!");
                            }

                            System.out.println(data);
                            uidField.setText("");
                            nameField.setText("");
                            descArea.setText("");
                            }



                    } 
                }
            }
            
          
            
        }catch(Exception ex){
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_addGroupBtnActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        int result = JOptionPane.showConfirmDialog(null,"Are you sure you want to log out?", "Logout Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            dispose();
            Homepage home = new Homepage();
            home.setVisible(true);                //frame will only be visible with set "true"
            home.setLocationRelativeTo(null);     //for opening in center
        } 
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void HomeLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeLbMouseClicked
        dispose();
        MainScreen main = new MainScreen(uid);
        main.setVisible(true);                //frame will only be visible with set "true"
        main.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_HomeLbMouseClicked

    private void AboutusLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AboutusLbMouseClicked
        // TODO add your handling code here:
        dispose();
        AboutUs about= new AboutUs();
        about.setVisible(true);
        about.setLocationRelativeTo (null);
    }//GEN-LAST:event_AboutusLbMouseClicked

    private void FeedbackLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FeedbackLbMouseClicked
        // TODO add your handling code here:
        
        Feedback feed = new Feedback(uid);
        feed.setVisible(true);                //frame will only be visible with set "true"
        feed.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_FeedbackLbMouseClicked

    private void uidFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uidFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uidFieldActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        uidField.setText("");
        nameField.setText("");
        descArea.setText("");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void cnicFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnicFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cnicFieldActionPerformed

    private void ProfileLbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProfileLbMouseClicked
        Profile1 profile = new Profile1(uid);
        profile.setVisible(true);                //frame will only be visible with set "true"
        profile.setLocationRelativeTo(null);     //for opening in center
    }//GEN-LAST:event_ProfileLbMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ElectionCreateEdit4_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ElectionCreateEdit4_2("", null, new ArrayList<>()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AboutusLb;
    private javax.swing.JLabel FeedbackLb;
    private javax.swing.JLabel HomeLb;
    private javax.swing.JLabel ProfileLb;
    private javax.swing.JButton addGroupBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField cnicField;
    private javax.swing.JLabel cnicLb;
    private javax.swing.JTextArea descArea;
    private javax.swing.JLabel descLb;
    private javax.swing.JButton doneBtn;
    private javax.swing.JPanel footerPanel;
    private javax.swing.JLabel headerLb;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logoLb;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLb;
    private javax.swing.JTextField uidField;
    private javax.swing.JLabel uidLb;
    // End of variables declaration//GEN-END:variables
}
